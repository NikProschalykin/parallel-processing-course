import Foundation

class CustomBarrier {
    private let totalThreads: Int
    private var count: Int = 0
    private let lock = NSLock()
    private let semaphore = DispatchSemaphore(value: 0)
    
    init(threadCount: Int) {
        self.totalThreads = threadCount
    }
    
    func wait() {
        lock.lock()
        count += 1
        let isLast = count == totalThreads
        lock.unlock()
        
        if isLast {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Ç–æ–∫, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ—Ö
            for _ in 1..<totalThreads {
                semaphore.signal()
            }
            count = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        } else {
            // –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Ç–æ–∫ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –±–∞—Ä—å–µ—Ä
            semaphore.wait()
        }
    }
}

func task5() {
    let barrier = CustomBarrier(threadCount: 3)

    for i in 1...3 {
        DispatchQueue.global(qos: .background).async {
            print("üîπ –ü–æ—Ç–æ–∫ \(i) –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã")
            sleep(1)
            
            print("‚è≥ –ü–æ—Ç–æ–∫ \(i) –∂–¥–µ—Ç —É –±–∞—Ä—å–µ—Ä–∞")
            barrier.wait()
            
            print("‚úÖ –ü–æ—Ç–æ–∫ \(i) –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–∞—Ä—å–µ—Ä–∞")
        }
    }
    
    sleep(5)
}


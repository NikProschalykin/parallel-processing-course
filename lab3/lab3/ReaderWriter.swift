import Foundation

class ReaderWriter {
    private var data: String = "Initial Data"
    private let queue = DispatchQueue(label: "ReaderWriterQueue", attributes: .concurrent)
    
    func readData(readerId: Int) {
        queue.sync {
            print("üîπ Reader \(readerId) reads: \(data)")
            usleep(500_000) // –°–∏–º—É–ª—è—Ü–∏—è —á—Ç–µ–Ω–∏—è
        }
    }
    
    func writeData(newData: String, writerId: Int) {
        queue.async(flags: .barrier) {
            print("‚úçÔ∏è Writer \(writerId) is writing...")
            usleep(800_000) // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–∏—Å–∏
            self.data = newData
            print("‚úÖ Writer \(writerId) updated data to: \(self.data)")
        }
    }
}

func task4() {
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ReaderWriter
    let sharedResource = ReaderWriter()
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Ç–∞—Ç–µ–ª–µ–π
    for i in 1...3 {
        DispatchQueue.global(qos: .background).async {
            for _ in 1...3 {
                sharedResource.readData(readerId: i)
            }
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏—Å–∞—Ç–µ–ª–µ–π
    for i in 1...2 {
        DispatchQueue.global(qos: .background).async {
            for j in 1...2 {
                sharedResource.writeData(newData: "Data from writer \(i)-\(j)", writerId: i)
            }
        }
    }
    
    // –î–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    sleep(5)
}
